name: Health AI Assistant CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}-frontend

jobs:
  test:
    runs-on: ubuntu-latest
    name: 🧪 Test Application
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔧 Build test images
      run: |
        docker-compose -f docker-compose.yml build
        
    - name: 🧪 Run backend tests
      run: |
        # Create test environment
        echo "OPENROUTER_API_KEY=test_key" > backend/.env.test
        
        # Test backend container can start
        docker run --rm -v $(pwd)/backend/.env.test:/app/.env \
          health-ai-assistant-backend:latest python -c "
import sys
sys.path.append('.')
try:
    from main import app
    print('✅ Backend imports successfully')
except Exception as e:
    print(f'❌ Backend test failed: {e}')
    sys.exit(1)
"
        
    - name: 🔍 Security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'health-ai-assistant-backend:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload security scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: 🏗️ Build & Push Images
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 📝 Extract metadata (backend)
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 📝 Extract metadata (frontend)
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: 🏗️ Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🏗️ Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: 🚀 Deploy to Staging
    environment: staging
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Railway (Staging)
      run: |
        # Install Railway CLI
        npm install -g @railway/cli
        
        # Deploy using Railway
        echo "${{ secrets.RAILWAY_TOKEN }}" | railway login --token
        railway environment staging
        railway up --detach
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        
    - name: 🔍 Health check staging
      run: |
        # Wait for deployment
        sleep 60
        
        # Check staging health
        for i in {1..5}; do
          if curl -f ${{ secrets.STAGING_URL }}/health; then
            echo "✅ Staging health check passed"
            break
          fi
          echo "⏳ Waiting for staging... (attempt $i/5)"
          sleep 30
        done

  deploy-production:
    needs: [build-and-push, deploy-staging]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    name: 🌟 Deploy to Production
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to Production
      run: |
        # Deploy to production using your preferred method
        # Example: Deploy to Railway production
        npm install -g @railway/cli
        echo "${{ secrets.RAILWAY_TOKEN }}" | railway login --token
        railway environment production
        railway up --detach
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        
    - name: 🔍 Production health check
      run: |
        sleep 60
        curl -f ${{ secrets.PRODUCTION_URL }}/health
        echo "✅ Production deployment successful"
        
    - name: 📢 Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Health AI Assistant deployed to production!
          Status: ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    name: 🧹 Cleanup
    
    steps:
    - name: 🧹 Cleanup old images
      run: |
        # Keep only last 5 versions
        echo "Cleaning up old container images..."
        # This would typically involve your container registry cleanup
